generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーモデル - システムの中心的なエンティティ
model User {
  id            String    @id @default(cuid())
  
  // 基本情報
  name          String
  email         String    @unique
  role          Role      @default(STUDENT)
  
  // 学生情報
  courseName    String?   @default("未設定") //コース名
  grade         Int?
  studentNumber Int?      // 出席番号(任意)
  enrollmentYear Int?     // 入学年度
  
  // リレーションシップ
  accounts      Account[]
  sessions      Session[]
  submissions   Submission[]
  assignments   Assignment[]   @relation("UserAssignments")
  notifications Notification[] @relation("UserNotifications")
  
  // 監査情報
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// 認証関連のモデル
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // リレーションシップ
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  // リレーションシップ
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 課題関連のモデル
model Assignment {
  id          String       @id @default(cuid())
  
  // 基本情報
  title       String
  description String?
  dueDate     DateTime
  year        Int
  
  // 課題の種類とカテゴリ
  type        AssignmentType @default(REPORT)
  category    String?
  tags        String[]       // タグ情報を配列として保存
  
  // 評価基準
  evaluationCriteria String?  // 評価基準の説明
  maxScore          Int?      // 最大配点
  passingScore      Int?      // 合格点
  
  // グループ課題情報
  isGroupAssignment Boolean   @default(false)
  maxGroupSize      Int?      // 最大グループサイズ
  minGroupSize      Int?      // 最小グループサイズ
  
  // 公開設定
  isPublic          Boolean   @default(false)
  publishedAt       DateTime? // 公開日時
  
  // 添付ファイル
  attachments       Attachment[]
  
  // ステータス管理
  status            AssignmentStatus @default(DRAFT)
  
  // 作成者情報
  createdById String?
  createdBy   User?        @relation("UserAssignments", fields: [createdById], references: [id])
  
  // リレーションシップ
  submissions Submission[]
  
  // 監査情報
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// 添付ファイルモデル
model Attachment {
  id            String     @id @default(cuid())
  assignmentId  String
  fileName      String
  fileUrl       String
  fileSize      Int?       // ファイルサイズ（バイト）
  fileType      String?    // ファイルタイプ（MIMEタイプ）
  
  // リレーションシップ
  assignment    Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  
  // 監査情報
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Submission {
  id           String    @id @default(cuid())
  version      Int       @default(1)
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  zipFileUrl   String
  previewImgUrl String?
  score        Int?
  comment      String?   @db.Text
  status       SubmissionStatus @default(DRAFT)
  reviewedAt   DateTime?
  driveFolderId String?  // Google Drive上のフォルダID
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([assignmentId])
  @@index([userId])
  @@index([status])
}

// 通知関連のモデル
model Notification {
  id        String           @id @default(cuid())
  
  // 基本情報
  userId    String
  title     String
  message   String
  read      Boolean          @default(false)
  type      NotificationType @default(INFO)
  
  // リレーションシップ
  user      User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  
  // 監査情報
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

// システム設定モデル
model SystemSettings {
  id                     Int      @id @default(1)
  systemName             String   @default("課題管理システム")
  systemDescription      String   @default("3DCG課題の提出・評価を管理するシステム")
  defaultCourseName      String   @default("未設定")
  availableGrades        Int[]    @default([1, 2, 3, 4])
  enableEmailNotifications Boolean  @default(true)
  enableAutoGrading      Boolean  @default(false)
  maxFileSize            Int      @default(50) // MBサイズ
  allowedFileTypes       String[] @default([".blend", ".fbx", ".obj", ".stl"])
  googleDriveFolderId    String?  // 課題提出用のルートフォルダID
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

// 列挙型
enum Role {
  TEACHER
  STUDENT
}

enum AssignmentType {
  REPORT        // レポート
  PRESENTATION  // プレゼンテーション
  TEST          // テスト
  PROJECT       // プロジェクト
  OTHER         // その他
}

enum AssignmentStatus {
  DRAFT         // 下書き
  PUBLISHED     // 公開済み
  CLOSED        // 締切済み
  ARCHIVED      // アーカイブ済み
}

enum SubmissionStatus {
  DRAFT     // 下書き
  SUBMITTED // 提出済み
  REVIEWED  // レビュー済み
  ARCHIVED  // アーカイブ済み
}

enum NotificationType {
  INFO     // 情報
  SUCCESS  // 成功
  WARNING  // 警告
  ERROR    // エラー
}
