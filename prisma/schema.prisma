generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  submissions   Submission[] @relation("UserSubmissions")
  notifications Notification[] @relation("UserNotifications")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  year        Int
  submissions Submission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Submission {
  id            String     @id @default(cuid())
  version       Int
  assignmentId  String
  userId        String
  zipFileUrl    String
  previewImgUrl String?
  score         Int?
  comment       String?
  status        String     @default("SUBMITTED") // SUBMITTED, REVIEWED, ARCHIVED
  reviewedAt    DateTime?
  assignment    Assignment @relation(fields: [assignmentId], references: [id])
  user          User       @relation("UserSubmissions", fields: [userId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  type      String   @default("info") // info, success, warning, error
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  TEACHER
  STUDENT
}
